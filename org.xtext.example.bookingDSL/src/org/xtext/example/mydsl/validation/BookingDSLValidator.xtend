/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.validation

import org.eclipse.xtext.validation.Check
import org.xtext.example.mydsl.bookingDSL.Attribute
import org.xtext.example.mydsl.bookingDSL.Booking
import org.xtext.example.mydsl.bookingDSL.BookingDSLPackage
import org.xtext.example.mydsl.bookingDSL.Declaration
import org.xtext.example.mydsl.bookingDSL.System
import java.util.ArrayList
import org.xtext.example.mydsl.bookingDSL.Customer
import java.util.List

/** 
 * This class contains custom validation rules. 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class BookingDSLValidator extends AbstractBookingDSLValidator {
	@Check def void warnIfNoDisplayName(Declaration declaration) {
		if (declaration instanceof Booking) {
			return;
		}
		var hasName = false
		var members = declaration.getMembers()
		for (var int i = 0; i < members.size(); i++) {
			var member = members.get(i)
			if (member instanceof Attribute) {
				var attriName = ((member as Attribute)).getName()
				if (attriName.equals("name")) {
					hasName = true
				}
			}
		}
		if (!hasName) {
			// Return warning that there are no name attribute
			warning("This declaration has no name", BookingDSLPackage::eINSTANCE.getBaseDeclaration_Name())
			return;
		}
	}

	@Check 
	def void errorIfDisplayNameIsNotString(Attribute attri) {
		var attriName = attri.getName()
		if (attriName.equals(("name"))) {
			var attriType = attri.getType().getLiteral()
			if (!attriType.equals("string")) {
				error("Attribute of type name can only be of type string",
					BookingDSLPackage::eINSTANCE.getAttribute_Name())
				return;
			}
		}
	}

	@Check 
	def void errorIfSystemNameIsLowerCase(System sys) {
		if (Character::isLowerCase(sys.getName().charAt(0))) {
			error("System name start with an uppercase letter", null)
		}
	}
	
	@Check 
	def void errorIfAttrubuteIsUpperCase(Attribute attribute) {
		if (Character::isUpperCase(attribute.getName().charAt(0))) {
			error("attribute name must start with a lowercase letter", null)
		}
	}
	
	@Check 
	def void errorIfHasMultipleAttributesWithSameNames(Declaration declaration) {
		var members = declaration.getMembers();
		var checkedMembers = new ArrayList<String>();
		for (var int i = 0; i < members.size(); i++) {
			var member = members.get(i)
			if (member instanceof Attribute) {
				var attriName = ((member as Attribute)).getName()
				if (!checkedMembers.isNullOrEmpty() && checkedMembers.contains(attriName)) {
					error("Cannot have multiple attributes with the same name: " + attriName.toString(), BookingDSLPackage::eINSTANCE.getBaseDeclaration_Name())
				}
				checkedMembers.add(attriName);
				
			}
		}
	}
	
	
	
	
}
