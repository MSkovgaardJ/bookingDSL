/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.scoping

import java.util.ArrayList
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.xtext.example.mydsl.bookingDSL.Attribute
import org.xtext.example.mydsl.bookingDSL.BookingDSLPackage
import org.xtext.example.mydsl.bookingDSL.Customer
import org.xtext.example.mydsl.bookingDSL.Resource
import java.util.List
import java.util.HashSet

/** 
 * This class contains custom scoping description.
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class BookingDSLScopeProvider extends AbstractBookingDSLScopeProvider {
	
	override IScope getScope(EObject context, EReference ref)
	{
		switch (context) {
			case ref == BookingDSLPackage.Literals.VAR__NAME: {
				var customer = EcoreUtil2::getContainerOfType(context, Customer);
				if(customer !== null)
				{
					return Scopes.scopeFor(customer.expandCustomerScope);
				}
				
				var resource = EcoreUtil2::getContainerOfType(context, Resource);
				if(resource !== null)
				{
					return Scopes.scopeFor(resource.expandRescourseScope)
				}
			}
			
			default: {
				
			}
		}
		super.getScope(context, ref);
	}
	
	def expandCustomerScope(Customer customer)
	{
		val scope = new ArrayList<Attribute>();
		var visited = new ArrayList<Customer>();
		
		visited.add(customer);
		customer.members.filter(Attribute).forEach[e | scope.add(e)]
		
		return scope;
		
		}
	
	def expandRescourseScope(Resource res)
	{
		val scope = new ArrayList<Attribute>();
		var visited = new ArrayList<Resource>();
		
		visited.add(res);
		res.members.filter(Attribute).forEach[e | scope.add(e)]
		
		return scope;
	}
}
